// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String      @unique
  users      User[]
  candidates Candidate[]

  @@map("departments")
}

model Position {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String      @unique
  users      User[]
  candidates Candidate[]

  @@map("positions")
}

enum Role {
  HR
  USER
  ADMIN
}

model Document {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  originalname String
  mimetype     String
  path         String
  size         Int
  user         User?      @relation(fields: [userId], references: [id])
  userId       Int?
  candidate    Candidate? @relation(fields: [candidateId], references: [id])
  candidateId  Int?
}

model User {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  email        String      @unique
  hash         String?
  firstName    String?
  lastName     String?
  interviews   Interview[]
  position     Position    @relation(fields: [positionId], references: [id])
  positionId   Int
  department   Department  @relation(fields: [departmentId], references: [id])
  departmentId Int
  role         Role        @default(USER)
  documents    Document[]

  @@map("users")
}

model Candidate {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  firstName    String
  lastName     String
  email        String
  phone        String?
  salary       Int?
  location     String?
  status       CandidateStatus @default(NOT_STARTED)
  interviews   Interview[]
  position     Position        @relation(fields: [positionId], references: [id])
  positionId   Int
  department   Department      @relation(fields: [departmentId], references: [id])
  departmentId Int
  documents    Document[]

  @@map("candidates")
}

enum CandidateStatus {
  NOT_STARTED
  ONGOING
  FAILED
  HIRED
}

model Interview {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  interviewee   Candidate @relation(fields: [intervieweeId], references: [id])
  intervieweeId Int
  date          DateTime
  start         DateTime
  end           DateTime
  location      String
  interviewer   User      @relation(fields: [interviewerId], references: [id])
  interviewerId Int

  @@map("interviews")
}
