// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String      @unique
  users      User[]
  candidates Candidate[]
  approvals  Approval[]

  @@map("departments")
}

model Position {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String      @unique
  users      User[]
  candidates Candidate[]

  @@map("positions")
}

enum Role {
  HR
  USER
  ADMIN
}

model Document {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  name         String
  originalname String
  mimetype     String
  path         String
  size         Int
  user         User?      @relation(fields: [userId], references: [id])
  userId       Int?
  candidate    Candidate? @relation(fields: [candidateId], references: [id])
  candidateId  Int?

  @@map("documents")
}

model User {
  id                 Int            @id @default(autoincrement())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  email              String         @unique
  hash               String
  firstName          String
  lastName           String
  salary             Int
  phone              String?
  location           String?
  interviews         Interview[]
  position           Position       @relation(fields: [positionId], references: [id])
  positionId         Int
  department         Department     @relation(fields: [departmentId], references: [id])
  departmentId       Int
  role               Role           @default(USER)
  documents          Document[]
  notifications      Notification[]
  status             UserStatus     @default(NOT_ACCEPTED)
  supervisor         User?          @relation("Supervisor", fields: [supervisorId], references: [id])
  supervisorId       Int?
  supervisee         User[]         @relation("Supervisor")
  masteringApprovals Approval[]     @relation("masteringApprovals")
  myApprovals        Approval[]     @relation("candidateApprovals")
  candidate          Candidate?

  @@map("users")
}

enum UserStatus {
  NOT_ACCEPTED
  WORKING
  FIRED
}

model Approval {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  department   Department     @relation(fields: [departmentId], references: [id])
  departmentId Int
  master       User?          @relation("masteringApprovals", fields: [masterId], references: [id])
  masterId     Int?
  candidate    User           @relation("candidateApprovals", fields: [candidateId], references: [id])
  candidateId  Int
  status       ApprovalStatus @default(PENDING)

  @@map("approvals")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Candidate {
  id           Int             @id @default(autoincrement())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  firstName    String
  lastName     String
  email        String
  phone        String?
  salary       Int?
  location     String?
  status       CandidateStatus @default(NOT_STARTED)
  interviews   Interview[]
  position     Position        @relation(fields: [positionId], references: [id])
  positionId   Int
  department   Department      @relation(fields: [departmentId], references: [id])
  departmentId Int
  documents    Document[]
  user         User?           @relation(fields: [userId], references: [id])
  userId       Int?            @unique

  @@map("candidates")
}

enum CandidateStatus {
  NOT_STARTED
  ONGOING
  FAILED
  HIRED
}

model Interview {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  interviewee   Candidate       @relation(fields: [intervieweeId], references: [id])
  intervieweeId Int
  date          DateTime
  start         DateTime
  end           DateTime
  location      String
  interviewer   User            @relation(fields: [interviewerId], references: [id])
  interviewerId Int
  status        InterviewStatus @default(NOT_STARTED)

  @@map("interviews")
}

enum InterviewStatus {
  NOT_STARTED
  FAILED
  PASSED
}

model Notification {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  title      String
  content    String
  unread     Boolean     @default(true)
  receiver   User        @relation(fields: [receiverId], references: [id])
  receiverId Int
  linkAction LinkAction?

  @@map("notifications")
}

model LinkAction {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  label          String
  to             String
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId Int          @unique

  @@map("link-actions")
}
